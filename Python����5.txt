■データ構造

- リスト型の便利メソッド

	append(x)		: 要素追加 a[len(a):] = [x] と等価
	extend(L)		: リスト内の要素を結合する a[len(a):] = L と等価
	insert(i, x)	: i 番目に、要素 x を挿入する。
	remove(x)		: 最初に見つかった 要素 x をリストから除去する。
	pop([i])		: i 番目にある要素を削除し、その要素を返します。
					  引数 i はオプション
					  pop()と指定すると末尾の要素を対象とする。
	index(x)		: 最初に見つかった 要素 x のインデックスを返します。
	count(x)		: 要素 x の出現回数を返します。
	sort()			: リストの項目をソートします。
					  インプレース演算されます。
					  (リストは実行結果によって置き換えられます)
	reverse()		: リストの項目を逆順にします。
					  インプレース演算されます。
					  (リストは実行結果によって置き換えられます)

- シーケンス(String, List, Taple)で使用すると便利な組み込みメソッド

	filter(func, seqence)	: 評価関数funcが真となる要素のみのシーケンスを返します。
							  func(item) -> bool

	map(func, seqence)		: シーケンス内の全てのアイテムに対して、funcを実行し、その戻り値で新しいシーケンスを構築し返します。 
							  func(item) -> Something

	reduce(func, seqence)	: シーケンスの最初の２つの要素を引数とし、funcを実行、次にその結果と、シーケンスの次の要素を引数にとりfuncを実行というのを繰り返し、最終的に単一の値を返します。
							  func(item1, item2) -> Something

- リストの内包表記(filter, map の簡易表記)
	[関数 for item in list]
	[関数 for item in list if 条件文]
	
	→ [最終的なリストに入れる値を返す式 for文 ... if文... ]
	for文を複数書くことで、多重ループを表現できる。
	if文を複数書くことで、様々条件でフィルタをかけることができる。
	
タプル
immutable な リストみたいなもの
t = 1, 2, 3		タプルのパッキング
x, y, z = t		タプルのアンパッキング

アンパッキングは、その他のシーケンスにも適用できる。
パッキングは必ず、タプルになる。

集合型
s = set(シーケンス型)
重複する要素がない。
順序付けがない。
以下の演算もサポート

a = set('abracadabra')
b = set('alacazam')

a - b	->	set(['r', 'b', 'd'])
aにあって、bにないもの

a | b	->	set(['a', 'c', 'b', 'd', 'm', 'l', 'r', 'z'])
aか、bにあるもの

a & b	->	set(['a', 'c'])
aとb両方にあるもの

a ^ b	->	set(['b', 'd', 'm', 'l', 'r', 'z'])
a またはb の片方にだけあるもの

辞書型（マップみたいなもんよね）
初期化		: dict = {
			  dict([(1, 'one'), (2, 'two'), (3, 'three')])}
			  dict(one=1, two=2, three=3)
要素の追加	: dict[key] = value
値の取得	: dict[key]
キー一覧取得: dict.keys()
キーの有無確認: dict.has_key(key) もしくは key in dict

ループについて
	辞書型のループで、keyとvalueを同時に取り出す
	->	for k, v in m.iteritems():
	(entrySet() 的なもの)

	シーケンス型のループで、インデックスと要素を同時に取り出す
	->	for i, v in enumerate(['hoge', 'foo', 'barz'])

	２つ以上のシーケンス型のループで同じインデックスの要素を同時に取り出す。
	-> for a, b in zip(listA, listB):
	
	シーケンス型を逆順でループ
	-> for n in reversed(xrange(10)):
	
	ソートしてループさせる
	hoge = set(['orange', 'strawberry', 'banana', 'pineapple'])
	-> for n in sorted(hoge):

条件について

	in , not in	: シーケンス中に存在するかどうか
	is , is not	: 二つのオブジェクトが実際に同じオブジェクトであるかどうか。


シーケンス同士の比較
	基本的には各要素を辞書順に比較。
	数値の場合は値の大小を比較。
	全ての要素の比較結果が等しければシーケンスは等しい。
	シーケンスの長さが違うときは、短い方が劣位（長い方 ＞ 短い方）。
	


